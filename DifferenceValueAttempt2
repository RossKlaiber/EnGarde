from dataclasses import dataclass
import numpy as np
import pandas as pd

@dataclass
class PoolData:
    '''
    A dataclass to represent data from a single pool, using a pandas DataFrame

    Attributes:
    -----------
    pool_ID : int
        The unique ID of the pool
    pool_size : int
        The number of fencers in the pool
    fencer_names : list[str]
        List of fencer names
    fencer_IDs : list[int]
        List of fencer IDs from the FIE website
    winners : np.ndarray
        A binary array indicating bout winners (1 for win, 0 for loss)
    scores : np.ndarray
        A 2D array of scores representing the pool table
    date : str
        The date the pool was recorded
    '''
    pool_ID: int
    pool_size: int
    fencer_names: list[str]
    fencer_IDs: list[int]
    winners: np.ndarray
    scores: np.ndarray
    date: str

    def __post_init__(self):
        # Convert the bout data into a DataFrame for easy handling
        self.df = pd.DataFrame(self.scores, columns=self.fencer_names, index=self.fencer_names)
        self.df_winners = pd.DataFrame(self.winners, columns=self.fencer_names, index=self.fencer_names)

    def calculate_scores(self):
        '''
        Calculate winScore, lossScore and difference for each fencer.

        winScore: Total score accumulated in wins
        lossScore: Total score accumulated in losses
        difference: winScore - lossScore
        '''
        winScores = {}
        lossScores = {}
        differences = {}

        for name in self.fencer_names:
            winScore = 0
            lossScore = 0
            for opponent in self.fencer_names:
                if name == opponent:
                    continue  # Skip the bout against themselves
                
                if self.df_winners.loc[name, opponent] == 1:  # If the fencer won
                    winScore += self.df.loc[name, opponent]
                else:  # If the fencer lost
                    lossScore += self.df.loc[name, opponent]

            difference = winScore - lossScore
            winScores[name] = winScore
            lossScores[name] = lossScore
            differences[name] = difference

        return winScores, lossScores, differences

    def get_fencer_by_name(self, name):
        '''Retrieve the fencer's data (scores, wins, losses, etc.) by their name'''
        if name not in self.fencer_names:
            raise ValueError(f"Fencer {name} not found in this pool")
        
        winScores, lossScores, differences = self.calculate_scores()

        return {
            'Name': name,
            'Win Score': winScores[name],
            'Loss Score': lossScores[name],
            'Difference': differences[name]
        }
